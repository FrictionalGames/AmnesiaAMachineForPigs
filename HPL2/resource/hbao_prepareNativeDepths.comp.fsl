// This code contains NVIDIA Confidential Information and is disclosed to you
// under a form of NVIDIA software license agreement provided separately to you.
//
// Notice
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and
// any modifications thereto. Any use, reproduction, disclosure, or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA Corporation is strictly prohibited.
//
// ALL NVIDIA DESIGN SPECIFICATIONS, CODE ARE PROVIDED "AS IS.". NVIDIA MAKES
// NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
//
// Information and code furnished is believed to be accurate and reliable.
// However, NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2008-2021 NVIDIA Corporation. All rights reserved.

// Copyright 2023 Michael Pollind
// SPDX-License-Identifier: Apache-2.0
#include "hbao_resource.h.fsl"

NUM_THREADS(16, 16, 1)
void CS_MAIN(SV_DispatchThreadID(uint3) did) 
{
    INIT_MAIN;
    if (did.x < Get(quarterViewportDim).x && did.y < Get(quarterViewportDim).y) {
	uint2 depthBufferCoord = 4 * did.xy;
        
        const float2 gatherCenter00 = (float2(depthBufferCoord) + float2(0, 0) + float2(0.5, 0.5)) * Get(viewportTexel);
        const float2 gatherCenter20 = (float2(depthBufferCoord) + float2(2, 0) + float2(0.5, 0.5)) * Get(viewportTexel);
        const float2 gatherCenter02 = (float2(depthBufferCoord) + float2(0, 2) + float2(0.5, 0.5)) * Get(viewportTexel);
        const float2 gatherCenter22 = (float2(depthBufferCoord) + float2(2, 2) + float2(0.5, 0.5)) * Get(viewportTexel);
        
        float4 s1 = GatherRedTex2D(Get(depthInput), Get(pointSampler), gatherCenter00);
        float4 s2 = GatherRedTex2D(Get(depthInput), Get(pointSampler), gatherCenter20);
        float4 s3 = GatherRedTex2D(Get(depthInput), Get(pointSampler), gatherCenter02);
        float4 s4 = GatherRedTex2D(Get(depthInput), Get(pointSampler), gatherCenter22);
        
        Write3D(Get(prepareDepths), uint3(did.xy, 0), ScreenSpaceToViewSpaceDepth(s1.w));
        Write3D(Get(prepareDepths), uint3(did.xy, 1), ScreenSpaceToViewSpaceDepth(s1.z));
        Write3D(Get(prepareDepths), uint3(did.xy, 2), ScreenSpaceToViewSpaceDepth(s2.w));
        Write3D(Get(prepareDepths), uint3(did.xy, 3), ScreenSpaceToViewSpaceDepth(s2.z));

        Write3D(Get(prepareDepths), uint3(did.xy, 4), ScreenSpaceToViewSpaceDepth(s1.x));
        Write3D(Get(prepareDepths), uint3(did.xy, 5), ScreenSpaceToViewSpaceDepth(s1.y));
        Write3D(Get(prepareDepths), uint3(did.xy, 6), ScreenSpaceToViewSpaceDepth(s2.x));
        Write3D(Get(prepareDepths), uint3(did.xy, 7), ScreenSpaceToViewSpaceDepth(s2.y));

        Write3D(Get(prepareDepths), uint3(did.xy, 8), ScreenSpaceToViewSpaceDepth(s3.w));
        Write3D(Get(prepareDepths), uint3(did.xy, 9), ScreenSpaceToViewSpaceDepth(s3.z));
        Write3D(Get(prepareDepths), uint3(did.xy, 10),ScreenSpaceToViewSpaceDepth(s4.w));
        Write3D(Get(prepareDepths), uint3(did.xy, 11),ScreenSpaceToViewSpaceDepth(s4.z));

        Write3D(Get(prepareDepths), uint3(did.xy, 12),ScreenSpaceToViewSpaceDepth(s3.x));
        Write3D(Get(prepareDepths), uint3(did.xy, 13),ScreenSpaceToViewSpaceDepth(s3.y));
        Write3D(Get(prepareDepths), uint3(did.xy, 14),ScreenSpaceToViewSpaceDepth(s4.x));
        Write3D(Get(prepareDepths), uint3(did.xy, 15),ScreenSpaceToViewSpaceDepth(s4.y));
    }
}
