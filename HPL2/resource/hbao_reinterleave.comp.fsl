// This code contains NVIDIA Confidential Information and is disclosed to you
// under a form of NVIDIA software license agreement provided separately to you.
//
// Notice
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and
// any modifications thereto. Any use, reproduction, disclosure, or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA Corporation is strictly prohibited.
//
// ALL NVIDIA DESIGN SPECIFICATIONS, CODE ARE PROVIDED "AS IS.". NVIDIA MAKES
// NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
//
// Information and code furnished is believed to be accurate and reliable.
// However, NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2008-2021 NVIDIA Corporation. All rights reserved.

// Copyright 2023 Michael Pollind
/// SPDX-License-Identifier: GPL-3.0
 
#include "hbao_resource.h.fsl"

NUM_THREADS(16, 16, 1)
void CS_MAIN(SV_DispatchThreadID(uint3) did) 
{
    INIT_MAIN;
    if (did.x < Get(quarterViewportDim).x && did.y < Get(quarterViewportDim).y) {
        const uint sliceIndex = did.z;
        const uint2 fullResPos = uint2(did.x * 4 + (sliceIndex % 4), did.y * 4 + uint(sliceIndex / 4));
        
        float ao = LoadRWTex3D(Get(aoQurter), uint3(did.xy, sliceIndex)).x;
        float4 color = LoadRWTex2D(Get(gOutput), fullResPos).rgba;

	    Write2D(Get(gOutput), fullResPos, float4(color.rgb * pow(saturate(ao), POWER_EXP), color.a));
    }
}
